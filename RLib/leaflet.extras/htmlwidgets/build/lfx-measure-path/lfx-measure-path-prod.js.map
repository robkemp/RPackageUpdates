{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/leaflet-measure-path/leaflet-measure-path.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","L","Marker","Measurement","Layer","extend","options","pane","initialize","latlng","measurement","title","rotation","setOptions","this","_latlng","_measurement","_title","_rotation","addTo","map","addLayer","onAdd","_map","getPane","getPanes","markerPane","el","_element","DomUtil","create","inner","innerHTML","on","_animateZoom","_setPosition","onRemove","off","removeChild","setPosition","latLngToLayerPoint","style","transform","opt","pos","_latLngToNewLayerPoint","zoom","center","round","marker","latLng","formatArea","a","unit","_measurementOptions","imperial","toFixed","Math","override","method","fn","hookAfter","apply","arguments","Polyline","include","showMeasurements","_measurementLayer","showOnHover","minPixelDistance","showDistances","showArea","lang","totalLength","totalArea","segmentLength","layerGroup","updateMeasurements","hideMeasurements","removeLayer","measurementOptions","setLatLngs","spliceLatLngs","formatDistance","feet","formatter","ll1","ll2","p1","p2","dist","latLngs","getLatLngs","isPolygon","Polygon","totalDist","length","Util","isArray","clearLayers","bind","len","distanceTo","layerPointToLatLng","x","y","_getRotation","area","coords","lowerIndex","middleIndex","upperIndex","rad","_","PI","coordsLength","lng","sin","lat","abs","ringArea","getBounds","getCenter","project","atan","addInitHook","Circle","setLatLng","setRadius","rho","getLatLng","getRadius","cos"],"mappings":"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","file":"lfx-measure-path-prod.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","!(function() {\n    'use strict';\n    // L.Icon.Measurement = L.DivIcon.extend({\n    //     initialize: function(measurement, title, options) {\n    //         L.Icon.prototype.initialize.call(this, L.extend({\n    //             className: 'leaflet-measure-path-measurement',\n    //             html: '<div title=\"' + title + ' ' + measurement + '\"><div>' + measurement + '</div>' ,\n    //             iconSize: [0, 0]\n    //         }, options));\n    //     }\n    // });\n\n    // L.icon.measurement = function(measurement, title, options) {\n    //     return new L.Icon.Measurement(measurement, title, options);\n    // };\n\n    // L.Marker.Measurement = L.Marker.extend({\n    //     initialize: function(latLng, measurement, title, rotation, options) {\n    //         this._rotation = rotation;\n    //         var icon = L.icon.measurement(measurement, title, options);\n    //         L.Marker.prototype.initialize.call(this, latLng, L.extend({\n    //             icon: icon\n    //         }, options));\n    //     },\n\n    //     _setPos: function() {\n    //         L.Marker.prototype._setPos.apply(this, arguments);\n    //         this._icon.style.transform += ' rotate(' + this._rotation + 'rad)';\n    //     }\n    // });\n\n    // L.marker.measurement = function(latLng, measurement, title, rotation, options) {\n    //     return new L.Marker.Measurement(latLng, measurement, title, rotation, options);\n    // };\n\n    L.Marker.Measurement = L[L.Layer ? 'Layer' : 'Class'].extend({\n        options: {\n            pane: 'markerPane'\n        },\n\n        initialize: function(latlng, measurement, title, rotation, options) {\n            L.setOptions(this, options);\n\n            this._latlng = latlng;\n            this._measurement = measurement;\n            this._title = title;\n            this._rotation = rotation;\n        },\n\n        addTo: function(map) {\n            map.addLayer(this);\n            return this;\n        },\n\n        onAdd: function(map) {\n            this._map = map;\n            var pane = this.getPane ? this.getPane() : map.getPanes().markerPane;\n            var el = this._element = L.DomUtil.create('div', 'leaflet-zoom-animated leaflet-measure-path-measurement', pane);\n            var inner = L.DomUtil.create('div', '', el);\n            inner.title = this._title;\n            inner.innerHTML = this._measurement;\n\n            map.on('zoomanim', this._animateZoom, this);\n\n            this._setPosition();\n        },\n\n        onRemove: function(map) {\n            map.off('zoomanim', this._animateZoom, this);\n            var pane = this.getPane ? this.getPane() : map.getPanes().markerPane;\n            pane.removeChild(this._element);\n            this._map = null;\n        },\n\n        _setPosition: function() {\n            L.DomUtil.setPosition(this._element, this._map.latLngToLayerPoint(this._latlng));\n            this._element.style.transform += ' rotate(' + this._rotation + 'rad)';\n        },\n\n        _animateZoom: function(opt) {\n            var pos = this._map._latLngToNewLayerPoint(this._latlng, opt.zoom, opt.center).round();\n            L.DomUtil.setPosition(this._element, pos);\n            this._element.style.transform += ' rotate(' + this._rotation + 'rad)';\n        }\n    });\n\n    L.marker.measurement = function(latLng, measurement, title, rotation, options) {\n        return new L.Marker.Measurement(latLng, measurement, title, rotation, options);\n    };\n\n    var formatDistance = function(d) {\n        var unit,\n            feet;\n\n        if (this._measurementOptions.imperial) {\n            feet = d / 0.3048;\n            if (feet > 3000) {\n                d = d / 1609.344;\n                unit = 'mi';\n            } else {\n                d = feet;\n                unit = 'ft';\n            }\n        } else {\n            if (d > 1000) {\n                d = d / 1000;\n                unit = 'km';\n            } else {\n                unit = 'm';\n            }\n        }\n\n        if (d < 100) {\n            return d.toFixed(1) + ' ' + unit;\n        } else {\n            return Math.round(d) + ' ' + unit;\n        }\n    }\n\n    var formatArea = function(a) {\n        var unit,\n            sqfeet;\n\n        if (this._measurementOptions.imperial) {\n            if (a > 404.685642) {\n                a = a / 4046.85642;\n                unit = 'ac';\n            } else {\n                a = a / 0.09290304;\n                unit = 'ft²';\n            }\n        } else {\n            if (a > 100000) {\n                a = a / 100000;\n                unit = 'km²';\n            } else {\n                unit = 'm²';\n            }\n        }\n\n        if (a < 100) {\n            return a.toFixed(1) + ' ' + unit;\n        } else {\n            return Math.round(a) + ' ' + unit;\n        }\n    }\n\n    var RADIUS = 6378137;\n    // ringArea function copied from geojson-area\n    // (https://github.com/mapbox/geojson-area)\n    // This function is distributed under a separate license,\n    // see LICENSE.md.\n    var ringArea = function ringArea(coords) {\n        var rad = function rad(_) {\n            return _ * Math.PI / 180;\n        };\n        var p1, p2, p3, lowerIndex, middleIndex, upperIndex,\n        area = 0,\n        coordsLength = coords.length;\n\n        if (coordsLength > 2) {\n            for (var i = 0; i < coordsLength; i++) {\n                if (i === coordsLength - 2) {// i = N-2\n                    lowerIndex = coordsLength - 2;\n                    middleIndex = coordsLength -1;\n                    upperIndex = 0;\n                } else if (i === coordsLength - 1) {// i = N-1\n                    lowerIndex = coordsLength - 1;\n                    middleIndex = 0;\n                    upperIndex = 1;\n                } else { // i = 0 to N-3\n                    lowerIndex = i;\n                    middleIndex = i+1;\n                    upperIndex = i+2;\n                }\n                p1 = coords[lowerIndex];\n                p2 = coords[middleIndex];\n                p3 = coords[upperIndex];\n                area += ( rad(p3.lng) - rad(p1.lng) ) * Math.sin( rad(p2.lat));\n            }\n\n            area = area * RADIUS * RADIUS / 2;\n        }\n\n        return Math.abs(area);\n    };\n\n    var circleArea = function circleArea(d) {\n        var rho = d / RADIUS;\n        return 2 * Math.PI * RADIUS * RADIUS * (1 - Math.cos(rho));\n    };\n\n    var override = function(method, fn, hookAfter) {\n        if (!hookAfter) {\n            return function() {\n                method.apply(this, arguments);\n                fn.apply(this, arguments);\n            }\n        } else {\n            return function() {\n                fn.apply(this, arguments);\n                method.apply(this, arguments);\n            }\n        }\n    };\n\n    L.Polyline.include({\n        showMeasurements: function(options) {\n            if (!this._map || this._measurementLayer) return this;\n\n            this._measurementOptions = L.extend({\n                showOnHover: false,\n                minPixelDistance: 30,\n                showDistances: true,\n                showArea: true,\n                lang: {\n                    totalLength: 'Total length',\n                    totalArea: 'Total area',\n                    segmentLength: 'Segment length'\n                }\n            }, options || {});\n\n            this._measurementLayer = L.layerGroup().addTo(this._map);\n            this.updateMeasurements();\n\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            return this;\n        },\n\n        hideMeasurements: function() {\n            this._map.off('zoomend', this.updateMeasurements, this);\n\n            if (!this._measurementLayer) return this;\n            this._map.removeLayer(this._measurementLayer);\n            this._measurementLayer = null;\n\n            return this;\n        },\n\n        onAdd: override(L.Polyline.prototype.onAdd, function() {\n            if (this.options.showMeasurements) {\n                this.showMeasurements(this.options.measurementOptions);\n            }\n        }),\n\n        onRemove: override(L.Polyline.prototype.onRemove, function() {\n            this.hideMeasurements();\n        }, true),\n\n        setLatLngs: override(L.Polyline.prototype.setLatLngs, function() {\n            this.updateMeasurements();\n        }),\n\n        spliceLatLngs: override(L.Polyline.prototype.spliceLatLngs, function() {\n            this.updateMeasurements();\n        }),\n\n        formatDistance: formatDistance,\n        formatArea: formatArea,\n\n        updateMeasurements: function() {\n            if (!this._measurementLayer) return;\n\n            var latLngs = this.getLatLngs(),\n                isPolygon = this instanceof L.Polygon,\n                options = this._measurementOptions,\n                totalDist = 0,\n                formatter,\n                ll1,\n                ll2,\n                p1,\n                p2,\n                pixelDist,\n                dist;\n\n            if (latLngs && latLngs.length && L.Util.isArray(latLngs[0])) {\n                // Outer ring is stored as an array in the first element,\n                // use that instead.\n                latLngs = latLngs[0];\n            }\n\n            this._measurementLayer.clearLayers();\n\n            if (this._measurementOptions.showDistances && latLngs.length > 1) {\n                formatter = this._measurementOptions.formatDistance || L.bind(this.formatDistance, this);\n\n                for (var i = 1, len = latLngs.length; (isPolygon && i <= len) || i < len; i++) {\n                    ll1 = latLngs[i - 1];\n                    ll2 = latLngs[i % len];\n                    dist = ll1.distanceTo(ll2);\n                    totalDist += dist;\n\n                    p1 = this._map.latLngToLayerPoint(ll1);\n                    p2 = this._map.latLngToLayerPoint(ll2);\n\n                    pixelDist = p1.distanceTo(p2);\n\n                    if (pixelDist >= options.minPixelDistance) {\n                        L.marker.measurement(\n                            this._map.layerPointToLatLng([(p1.x + p2.x) / 2, (p1.y + p2.y) / 2]), \n                            formatter(dist), options.lang.segmentLength, this._getRotation(ll1, ll2), options)\n                            .addTo(this._measurementLayer);\n                    }\n                }\n\n                // Show total length for polylines\n                if (!isPolygon) {\n                    L.marker.measurement(ll2, formatter(totalDist), options.lang.totalLength, 0, options)\n                        .addTo(this._measurementLayer);\n                }\n            }\n\n            if (isPolygon && options.showArea && latLngs.length > 2) {\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n                var area = ringArea(latLngs);\n                L.marker.measurement(this.getBounds().getCenter(),\n                    formatter(area), options.lang.totalArea, 0, options)\n                    .addTo(this._measurementLayer);\n            }\n        },\n\n        _getRotation: function(ll1, ll2) {\n            var p1 = this._map.project(ll1),\n                p2 = this._map.project(ll2);\n\n            return Math.atan((p2.y - p1.y) / (p2.x - p1.x));\n        }\n    });\n\n    L.Polyline.addInitHook(function() {\n        if (this.options.showMeasurements) {\n            this.showMeasurements();\n        }\n    });\n\n    L.Circle.include({\n        showMeasurements: function(options) {\n            if (!this._map || this._measurementLayer) return this;\n\n            this._measurementOptions = L.extend({\n                showOnHover: false,\n                showArea: true,\n                lang: {\n                    totalArea: 'Total area',\n                }\n            }, options || {});\n\n            this._measurementLayer = L.layerGroup().addTo(this._map);\n            this.updateMeasurements();\n\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            return this;\n        },\n\n        hideMeasurements: function() {\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            if (!this._measurementLayer) return this;\n            this._map.removeLayer(this._measurementLayer);\n            this._measurementLayer = null;\n\n            return this;\n        },\n\n        onAdd: override(L.Circle.prototype.onAdd, function() {\n            if (this.options.showMeasurements) {\n                this.showMeasurements(this.options.measurementOptions);\n            }\n        }),\n\n        onRemove: override(L.Circle.prototype.onRemove, function() {\n            this.hideMeasurements();\n        }, true),\n\n        setLatLng: override(L.Circle.prototype.setLatLng, function() {\n            this.updateMeasurements();\n        }),\n\n        setRadius: override(L.Circle.prototype.setRadius, function() {\n            this.updateMeasurements();\n        }),\n\n        formatArea: formatArea,\n\n        updateMeasurements: function() {\n            if (!this._measurementLayer) return;\n\n            var latLng = this.getLatLng(),\n                options = this._measurementOptions,\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n\n            this._measurementLayer.clearLayers();\n\n            if (options.showArea) {\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n                var area = circleArea(this.getRadius());\n                L.marker.measurement(latLng, \n                    formatter(area), options.lang.totalArea, 0, options)\n                    .addTo(this._measurementLayer);\n            }\n        }\n    })    \n\n    L.Circle.addInitHook(function() {\n        if (this.options.showMeasurements) {\n            this.showMeasurements();\n        }\n    });\n})();\n\n"],"sourceRoot":""}
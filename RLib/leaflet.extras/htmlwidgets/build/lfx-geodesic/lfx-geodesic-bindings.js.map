{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./inst/htmlwidgets/bindings/lfx-geodesic-bindings.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","LeafletWidget","methods","addGeodesicPolylines","polygons","layerId","group","options","popup","popupOptions","label","labelOptions","highlightOptions","length","df","DataFrame","col","cbind","addGenericLayers","this","shapes","ret_shapes","j","k","push","HTMLWidgets","dataframeToD3","L","geodesic","addGreatCircles","lat","lng","radius","$","isEmptyObject","isNumeric","map","Geodesic","center","marker","on","e","layer","addTo","removeLayer","createCircle"],"mappings":"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","file":"lfx-geodesic-bindings.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* global $, LeafletWidget, L, HTMLWidgets */\nLeafletWidget.methods.addGeodesicPolylines  = function(\n  polygons, layerId, group, options, popup, popupOptions,\n  label, labelOptions, highlightOptions) {\n  if(polygons.length > 0) {\n    var df = new LeafletWidget.DataFrame()\n      .col('shapes', polygons)\n      .col('layerId', layerId)\n      .col('group', group)\n      .col('popup', popup)\n      .col('popupOptions', popupOptions)\n      .col('label', label)\n      .col('labelOptions', labelOptions)\n      .col('highlightOptions', highlightOptions)\n      .cbind(options);\n\n    LeafletWidget.methods.addGenericLayers(this, 'shape', df,\n      function(df, i) {\n        var shapes = df.get(i, 'shapes');\n        var ret_shapes = [];\n        for (var j = 0; j < shapes.length; j++) {\n          for (var k = 0; k < shapes[j].length; k++) {\n            ret_shapes.push(\n              HTMLWidgets.dataframeToD3(shapes[j][k])\n            );\n          }\n        }\n        return L.geodesic(ret_shapes, df.get(i));\n      });\n  }\n};\n\n\nLeafletWidget.methods.addGreatCircles  = function(\n  lat, lng, radius, layerId, group, options, popup, popupOptions,\n  label, labelOptions, highlightOptions) {\n  if(!($.isEmptyObject(lat) || $.isEmptyObject(lng)) ||\n      ($.isNumeric(lat) && $.isNumeric(lng))) {\n    var df = new LeafletWidget.DataFrame()\n      .col('lat', lat)\n      .col('lng', lng)\n      .col('radius', radius)\n      .col('layerId', layerId)\n      .col('group', group)\n      .col('popup', popup)\n      .col('popupOptions', popupOptions)\n      .col('label', label)\n      .col('labelOptions', labelOptions)\n      .col('highlightOptions', highlightOptions)\n      .cbind(options);\n\n    var map = this;\n\n    LeafletWidget.methods.addGenericLayers(this, 'shape', df,\n      function(df, i) {\n        var options = df.get(i);\n        var Geodesic = L.geodesic([], options);\n        var center = L.marker([df.get(i, 'lat'), df.get(i, 'lng')]);\n\n        map.on('layeradd', function(e) {\n          if(e.layer === Geodesic) {\n            center.addTo(map);\n          }\n        });\n\n        map.on('layerremove', function(e) {\n          if(e.layer === Geodesic) {\n            map.removeLayer(center);\n          }\n        });\n\n        Geodesic.createCircle([df.get(i, 'lat'), df.get(i, 'lng')], df.get(i, 'radius'));\n        return Geodesic;\n      });\n  }\n};\n"],"sourceRoot":""}